#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ AutoRAG —Å–∏—Å—Ç–µ–º–µ
"""

import os
import sys
import subprocess
import time
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutoRAGFixer:
    def __init__(self):
        self.data_service_url = "http://localhost:5050"
        self.rag_service_url = "http://localhost:5060"
        
    def check_docker(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker"""
        try:
            subprocess.run(["docker", "--version"], check=True, capture_output=True)
            logger.info("‚úÖ Docker –Ω–∞–π–¥–µ–Ω")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose")
            return False
    
    def check_docker_compose(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose"""
        try:
            subprocess.run(["docker-compose", "--version"], check=True, capture_output=True)
            logger.info("‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
        if not os.path.exists(".env"):
            if os.path.exists("env.example"):
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ env.example...")
                subprocess.run(["cp", "env.example", ".env"])
                logger.info("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
                logger.warning("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")
            else:
                logger.error("‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            logger.info("‚úÖ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    def check_openai_key(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API –∫–ª—é—á–∞"""
        try:
            with open(".env", "r") as f:
                content = f.read()
                if "OPENAI_API_KEY=" in content and not "OPENAI_API_KEY=your_api_key_here" in content:
                    logger.info("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
                    return False
        except FileNotFoundError:
            logger.error("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def stop_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            subprocess.run(["docker-compose", "down"], check=True)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def build_services(self):
        """–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            subprocess.run(["docker-compose", "build"], check=True)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–±—Ä–∞–Ω—ã")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            subprocess.run(["docker-compose", "up", "-d"], check=True)
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def wait_for_services(self, timeout=60):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º {timeout} —Å–µ–∫—É–Ω–¥)...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Data Service
                response = requests.get(f"{self.data_service_url}/health", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Data Service –≥–æ—Ç–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG Service
                    response = requests.get(f"{self.rag_service_url}/health", timeout=5)
                    if response.status_code == 200:
                        logger.info("‚úÖ RAG Service –≥–æ—Ç–æ–≤")
                        return True
                    
            except requests.exceptions.RequestException:
                pass
            
            time.sleep(2)
        
        logger.error("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        return False
    
    def check_swagger(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Swagger UI"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Data Service Swagger
            response = requests.get(f"{self.data_service_url}/docs", timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ Swagger UI Data Service –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.error(f"‚ùå Swagger UI Data Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG Service Swagger
            response = requests.get(f"{self.rag_service_url}/docs", timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ Swagger UI RAG Service –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.error(f"‚ùå Swagger UI RAG Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
            
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Swagger UI: {e}")
            return False
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        try:
            subprocess.run(["docker-compose", "logs", "--tail=20"])
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def fix_all(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
        logger.info("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not self.check_docker():
            return False
        
        if not self.check_docker_compose():
            return False
        
        if not self.check_env_file():
            return False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ã
        self.stop_services()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        if not self.build_services():
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        if not self.start_services():
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if not self.wait_for_services():
            logger.error("–°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏:")
            self.show_logs()
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Swagger UI
        if not self.check_swagger():
            logger.error("Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏:")
            self.show_logs()
            return False
        
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        logger.info(f"üìñ Swagger UI Data Service: {self.data_service_url}/docs")
        logger.info(f"üìñ Swagger UI RAG Service: {self.rag_service_url}/docs")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = AutoRAGFixer()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "check":
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            fixer.check_docker()
            fixer.check_docker_compose()
            fixer.check_env_file()
            fixer.check_openai_key()
            
        elif command == "logs":
            fixer.show_logs()
            
        elif command == "restart":
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            fixer.stop_services()
            fixer.start_services()
            
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: check, logs, restart")
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        success = fixer.fix_all()
        
        if not success:
            logger.error("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            sys.exit(1)
        else:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == "__main__":
    main() 