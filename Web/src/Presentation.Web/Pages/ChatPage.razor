@page "/chat"
@using AutoRag.Application.DTOs
@using AutoRag.Application.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IChatService ChatSvc
@inject ISnackbar Snackbar
@inject IJSRuntime Js
@inject NavigationManager Nav
@using MudBlazor
@using Markdig
@implements IDisposable

<PageTitle>Chat</PageTitle>

@if (_notAuthenticated)
{
    <MudAlert Severity="Severity.Warning">
        Please log-in to access chat.
    </MudAlert>
}
else
{
    <MudPaper Class="pa-4">

        <!-- ----------------------------- HISTORY --------------------------- -->
        <div id="messagesContainer" class="chat-messages mb-2">
            @foreach (var m in _messages)
            {
                <MudChat ChatPosition="@(m.Role=="user"
                         ?ChatBubblePosition.End
                         :ChatBubblePosition.Start)">
                    <MudChatBubble Class="@(m.Role=="user"
                                             ? "bubble-user"
                                             : "bubble-assistant")">
                        <div class="bubble-content">
                            <MudIcon Icon="@(m.Role=="user"
                                             ? Icons.Material.Filled.Person
                                             : Icons.Material.Filled.SmartToy)"
                                     Size="Size.Small" />
                            <MudText Typo="Typo.body2">
                                @((MarkupString)ToHtml(m.Content))
                            </MudText>
                        </div>
                    </MudChatBubble>
                </MudChat>
            }

            @if (_waiting)
            {
                <div class="d-flex align-center mt-2 gap-2">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Typo="Typo.subtitle2">@($"{_waitSeconds:0}s")</MudText>
                </div>
            }
        </div>

        <!-- ----------------------------- INPUT ----------------------------- -->
        <MudTextField T="string"
                      @ref="_inputRef"
                      Class="chat-input"
                      Placeholder="Type your message…"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      OnAdornmentClick="Send"
                      OnKeyUp="HandleKey"
                      Immediate="true"
                      @bind-Value="_input" />
    </MudPaper>
}

@code {
    /* ---------------- state ---------------- */
    private readonly List<ChatMessageDto> _messages = [];
    private string _input = string.Empty;
    private MudTextField<string> _inputRef = default!;

    private bool _notAuthenticated;

    /* waiting indicator */
    private bool _waiting;
    private DateTime _waitStart;
    private double _waitSeconds;
    private System.Timers.Timer? _timer;

    /* ---------------- lifecycle ---------------- */
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var history = await ChatSvc.GetHistoryAsync();
            _messages.AddRange(history);
            await ScrollToBottom();
        }
        catch (InvalidOperationException)
        {
            _notAuthenticated = true;
            await Task.Delay(50);
            Nav.NavigateTo("/auth", true, true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    /* ---------------- events ---------------- */
    private async Task HandleKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }

    private async Task Send()
    {
        var text = _input?.Trim();
        if (_notAuthenticated || string.IsNullOrWhiteSpace(text))
            return;

        /* clear input BEFORE awaiting anything */
        _input = string.Empty;
        _inputRef.Clear();
        await InvokeAsync(StateHasChanged);

        _messages.Add(new("user", text, DateTime.UtcNow));
        StartWaitingIndicator();

        try
        {
            var resp = await ChatSvc.SendAsync(new ChatRequestDto(text));
            _messages.Add(new("assistant", resp.Message, DateTime.UtcNow));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }

        StopWaitingIndicator();
        await ScrollToBottom();
    }

    /* ---------------- waiting indicator helpers ---------------- */
    private void StartWaitingIndicator()
    {
        _waitStart = DateTime.UtcNow;
        _waitSeconds = 0;
        _waiting = true;

        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += (_, _) =>
        {
            _waitSeconds = (DateTime.UtcNow - _waitStart).TotalSeconds;
            InvokeAsync(StateHasChanged);
        };
        _timer.AutoReset = true;
        _timer.Start();
    }

    private void StopWaitingIndicator()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
        _waiting = false;
        _waitSeconds = 0;
        InvokeAsync(StateHasChanged);
    }

    /* ---------------- misc helpers ---------------- */
    private async Task ScrollToBottom()
    {
        try { await Js.InvokeVoidAsync("autoragScrollToBottom", "messagesContainer"); }
        catch { /* ignore */ }
    }

    private static string ToHtml(string md) => Markdown.ToHtml(md ?? string.Empty);

    public void Dispose() => _timer?.Dispose();
}

<style>
    .chat-messages{
        height:75vh;
        overflow-y:auto;
        padding:.5rem;
        border:1px solid var(--mud-palette-grey-lighten2);
        border-radius:4px;
    }
    .bubble-user{
        background:#e3f2fd;
        border:1px solid #bbdefb;
        color:var(--mud-palette-text-primary);
    }
    .bubble-assistant{
        background:#f5f5f5;
        border:1px solid #e0e0e0;
        color:var(--mud-palette-text-primary);
    }
    .bubble-content{
        display:flex;
        align-items:flex-start;
        gap:.4rem;
        white-space:normal;
    }
    .chat-input{width:100%}
</style>