#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG –∏ Data —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import requests
import json
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATA_SERVICE_URL = "http://localhost:5050"
RAG_SERVICE_URL = "http://localhost:5060"

def test_data_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Service"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Service ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        response = requests.get(f"{DATA_SERVICE_URL}/health", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Data Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå Data Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI
        response = requests.get(f"{DATA_SERVICE_URL}/docs", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Swagger UI Data Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå Swagger UI Data Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Data Service: {e}")
        return False

def test_rag_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Service"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Service ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        response = requests.get(f"{RAG_SERVICE_URL}/health", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ RAG Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå RAG Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI
        response = requests.get(f"{RAG_SERVICE_URL}/docs", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Swagger UI RAG Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå Swagger UI RAG Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RAG Service: {e}")
        return False

def test_services_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        chat_id = "test_chat_123"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Data Service
        params_data = {
            "chat_id": chat_id,
            "prompt_id": "test_prompt",
            "document_id": "test_doc",
            "top_k": 3,
            "temperature": 0.7,
            "max_tokens": 1000,
            "model_name": "gpt-3.5-turbo"
        }
        
        response = requests.post(f"{DATA_SERVICE_URL}/chat/{chat_id}/params", 
                               json=params_data, timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {response.status_code}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        doc_data = {
            "document_id": "test_doc",
            "content": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –º–µ—Ç–æ–¥–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.",
            "chunk_size": 100,
            "chunk_overlap": 20
        }
        
        response = requests.post(f"{DATA_SERVICE_URL}/docs/update", 
                               json=doc_data, timeout=30)
        if response.status_code == 200:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å
        rag_request = {
            "chat_id": chat_id,
            "user_message": "–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç?"
        }
        
        response = requests.post(f"{RAG_SERVICE_URL}/rag/process", 
                               json=rag_request, timeout=30)
        if response.status_code == 200:
            result = response.json()
            logger.info("‚úÖ RAG –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {result.get('assistant_message', '')[:100]}...")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            logger.error(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            return False
        
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(5)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    data_service_ok = test_data_service()
    rag_service_ok = test_rag_service()
    
    if data_service_ok and rag_service_ok:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration_ok = test_services_integration()
        
        if integration_ok:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìñ Swagger UI Data Service: {DATA_SERVICE_URL}/docs")
            logger.info(f"üìñ Swagger UI RAG Service: {RAG_SERVICE_URL}/docs")
        else:
            logger.error("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    else:
        logger.error("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if __name__ == "__main__":
    main() 