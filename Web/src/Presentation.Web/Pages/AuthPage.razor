@page "/auth"
@layout AutoRag.Presentation.Web.Shared.LandingLayout
@using AutoRag.Application.DTOs
@using AutoRag.Application.Interfaces
@using AutoRag.Presentation.Web.ViewModels
@inject IAuthService       AuthSvc
@inject NavigationManager  Nav
@using MudBlazor
@using Microsoft.AspNetCore.Components

<PageTitle>Authentication</PageTitle>

<link href="css/landing.css" rel="stylesheet" />

<div class="auth-container d-flex justify-center align-center">
    <MudPaper Class="pa-6" Style="max-width:450px;width:100%">
        <MudTabs @bind-ActivePanelIndex="_tabIndex" Rounded="true">

            <!-- ---------------- REGISTER ---------------- -->
            <MudTabPanel Text="Register">
                <MudForm @ref="_regForm">
                    <MudTextField @bind-Value="_vm.FullName" Label="Full name" Required="true" Class="mb-3" />
                    <MudTextField @bind-Value="_vm.Email"    Label="Email"      Required="true" Class="mb-3" />
                    <MudTextField @bind-Value="_vm.Password" Label="Password"
                                   InputType="InputType.Password" Required="true" Class="mb-4" />

                    <MudGrid Class="mb-3">
                        <MudItem xs="12">
                            <MudButton Color="Color.Primary"
                                       Disabled="_vm.IsBusy"
                                       OnClick="Register"
                                       Class="mud-width-full">
                                Register
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
                @Message()
            </MudTabPanel>

            <!-- ---------------- LOGIN ---------------- -->
            <MudTabPanel Text="Login">
                <MudForm @ref="_loginForm">
                    <MudTextField @bind-Value="_vm.Email"    Label="Email"      Required="true" Class="mb-3" />
                    <MudTextField @bind-Value="_vm.Password" Label="Password"
                                   InputType="InputType.Password" Required="true" Class="mb-4" />

                    <MudGrid Class="mb-3">
                        <MudItem xs="12">
                            <MudButton Color="Color.Primary"
                                       Disabled="_vm.IsBusy"
                                       OnClick="Login"
                                       Class="mud-width-full">
                                Login
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
                @Message()
            </MudTabPanel>

        </MudTabs>
    </MudPaper>
</div>

@code {
    [SupplyParameterFromQuery(Name = "token")]
    public Guid? Token { get; set; }

    private readonly AuthPageVm _vm = new();
    private int _tabIndex;

    private MudForm _regForm   = default!;
    private MudForm _loginForm = default!;

    private RenderFragment Message() => @<div class="mt-2 d-flex justify-center">
        @if (_vm.IsBusy)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (_vm.Message is not null)
        {
            <MudAlert Severity="Severity.Info">@_vm.Message</MudAlert>
        }
    </div>;

    private async Task Register()
    {
        await _regForm.Validate();
        if (!_regForm.IsValid) return;

        _vm.IsBusy = true;
        var res = await AuthSvc.RegisterAsync(
            new RegisterDto(_vm.FullName!, _vm.Email, _vm.Password),
            Token);
        _vm.Message = res.Message;
        _vm.IsBusy  = false;

        if (!string.IsNullOrEmpty(res.UserId))
            Nav.NavigateTo("/home");
    }

    private async Task Login()
    {
        await _loginForm.Validate();
        if (!_loginForm.IsValid) return;

        _vm.IsBusy = true;
        var res = await AuthSvc.LoginAsync(new LoginDto(_vm.Email, _vm.Password));
        _vm.Message = res.Message;
        _vm.IsBusy  = false;

        if (!string.IsNullOrEmpty(res.UserId))
            Nav.NavigateTo("/home");
    }
}

<style>
    .auth-container{height:100vh}
</style>